# -*- coding: utf-8 -*-
"""Lab_tensorflow.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1km6dBNZ3FQk5R2AUKGvIZKivErre1bb5
"""

# TensorFlow and tf.keras
import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import datasets, layers, models

# Helper libraries
import numpy as np
import matplotlib.pyplot as plt

"""## Importar la base de datos de Fashion MNIST"""

fashion_mnist = keras.datasets.fashion_mnist

(train_images, train_labels), (test_images, test_labels) = fashion_mnist.load_data()

class_names = ['T-shirt/top', 'Trouser', 'Pullover', 'Dress', 'Coat',
               'Sandal', 'Shirt', 'Sneaker', 'Bag', 'Ankle boot']

"""Escale estos valores a un rango de 0 a 1 antes de alimentarlos al modelo de red neuronal. Para hacerlo, divida los valores entre 255. Es importante que el *conjunto de entrenamiento* y el *conjunto de prueba* se procesen previamente de la misma manera:"""

train_images = train_images / 255.0

test_images = test_images / 255.0

"""Expande las dimensiones de la data de entrenamiento y la data de prueba"""

train_images = np.expand_dims(train_images, axis=3)
test_images = np.expand_dims(test_images, axis=3)
train_images.shape

"""# Construye el modelo"""

model = keras.Sequential([
    keras.layers.Conv2D(32, (3, 3), activation='selu', input_shape=(28, 28,1)),
    keras.layers.MaxPooling2D((2, 2)),
    keras.layers.Conv2D(64, (3, 3), activation='selu'),
    keras.layers.MaxPooling2D((2, 2)),
    keras.layers.Conv2D(64, (3, 3), activation='selu'),
])

model.add(layers.Flatten())
model.add(layers.Dense(64, activation='selu'))
model.add(layers.Dense(10))

"""Vamos a mostrar la arquitectura de nuestra modelo hasta ahora"""

model.summary()

model.compile(optimizer='sgd',
              loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True),
              metrics=['accuracy'])

"""## Entrenar al modelo

### Alimenta el modelo

Para comenzar a entrenar, llame al método `model.fit`, llamado así porque" ajusta "el modelo a los datos de entrenamiento:
"""

history = model.fit(train_images, train_labels, epochs=10,
                    validation_data=(test_images, test_labels))

"""### Evaluate accuracy"""

plt.plot(history.history['accuracy'], label='accuracy')
plt.plot(history.history['val_accuracy'], label = 'val_accuracy')
plt.xlabel('Epoch')
plt.ylabel('Accuracy')
plt.ylim([0.5, 1])
plt.legend(loc='lower right')

test_loss, test_acc = model.evaluate(test_images,  test_labels, verbose=2)

print('\nTest accuracy:', test_acc)